(define (nqueens n)
  ;initialize board
  (let ( (board (make-vector n (* 10 n))))
    ;run through colums, start recursing
    (colRecurse board 0 n)
    (display board)
    )
  )

(define (colRecurse board col n)
  (display "colrecurse")(newline)
  (if (= col n)
      ;if we're at the end, return the board
      #t
      ;else, go through each row and find an open spot
      (begin
        (do ((i 0 (+ i 1))) ((and (>= i (vector-length board)) (not (eqv? n col))))
          (rowRecurse board col i n)
          )
        )
      )
  )

(define (rowRecurse board col row n)
  (display "row recurse")(newline)
  (if (eqv? row n)
      (begin
      (display "ran out of rows")(newline)
      #f
      )
      (begin
        ;(display (checkRow board row '0 n))(newline)
        ;(display (checkDiag board row col))(newline)(newline)
        ;if no conflict, place
        (display "checking horiz and diag")(newline)
        (if (and (checkRow board row 0 n) (checkDiag board row col))
            (begin
              (vector-set! board col row)
              (display "open spot")(newline)
              (display "board- ")(display board)(newline)
              (display "col- ")(display col)(newline)
              (display "row- ")(display row)(newline)
              (display "n- ")(display n)(newline)(newline)
              (colRecurse board (+ col 1) n)
              )
            ;else, go to the next row
            (begin
              (display "no open slot")(newline)
              (display "board- ")(display board)(newline)
              (display "col- ")(display col)(newline)
              (display "row- ")(display row)(newline)(newline)
              (rowRecurse board col (+ row 1) n)
              )
            )
        )
      )
  )
;check to see if there's another rowNum in board
(define (checkRow board row i n)
  (display "checkRow")(newline)
  (if (eq? i n)
      (begin
        (display "pass")(newline)
        #t
        )
      (if (eq? (vector-ref board i) row)
          (begin
            (display "fail")(newline)
            #f
            )
          (checkRow board row (+ i '1) n)
          )
      )
  )
(define (checkDiag board row col)
  (let ((conflict #t))
    (do ((i 0 (+ i 1))) ((>= i (vector-length board)))
      (begin
         (display "checking diag")(newline)
        (display "i/row/col ")(display i)(display row)(display col)(newline)
        (display (+ row (abs (- col i))))(newline)
        (display (- row (abs (- col i))))(newline)
        ;(display (vector-ref board i))(newline)(newline)
        (newline)
        (if (or (eqv?  (+ row (abs (- col i))) (vector-ref board i)) (eqv? (- row (abs (- col i))) (vector-ref board i)))
            (begin
              (display "diag conflict")(newline)
              (set! conflict #f)
            )
            )
        )
      )
    (display "it worked? ")(display conflict)(newline)(newline)
    conflict
    )
  )

(nqueens 4)