#lang racket
(define count 0)
(define (nqueens n)
  ;initialize board
  (let ( (board (makeBoard n)))
    (solvLoop board)
    ;(display count)
    )
  )

(define (randBoard n)
  (let ( (board (make-vector n)))
    (do ((i 0 (+ i 1))) ((>= i (vector-length board)))
      (vector-set! board i (random (vector-length board)))
      )
    board
    )
  )

(define (makeBoard n)
  (let ( (board (make-vector n)))
    (do ((i 0 (+ i 1))) ((>= i (vector-length board)))
      (vector-set! board i i)
      )
    board
    )
  )

(define (solvLoop board)
  ;(display "new round- ")(display board)(newline)
  (let ((solved #t) (stuck #t))
    (do ((col 0 (+ col 1))) ((>= col (vector-length board)))
      (let ((leastCon 100000) (leastConRow 0))
        ;(display "\t col- ")(display col)(newline)
        (do ((row 0 (+ row 1))) ((>= row (vector-length board)))
          ;(display "\t\t row- ")(display row)(newline)
          ;(display "\t\t\t old conflict- ")(display leastCon)(display " new conflict- ")(display (checkConflicts board row col))(newline)
          (if (<= (checkConflicts board row col) leastCon)
              (begin
                ;(display "\t\t\t new low conflict!")(newline)
                (set! leastCon (checkConflicts board row col))
                (set! leastConRow row)
                )
              '()
              )
          )
        (if (not (eqv? leastCon 0))
            (begin
              ;(display "\t\t\t not solved this round!")(newline)
              (set! solved #f)
              )
            '()
            )
        (if (not (eqv? leastConRow (vector-ref board col)))
            (set! stuck #f)
            '()
            )
        (vector-set! board col leastConRow)
        ;(display "\t\t\t")(display board)(newline)
        )
      )
    (if (eqv? solved #t)
        board
        (begin
          (if (eqv? stuck #t)
              (solvLoop (randBoard (vector-length board)))
              (solvLoop board)
              )
          )
        )
    )
  )

(define (solvLoop2 board col)
  (let ((leastCon 100000) (leastConRow 0))
        ;(display "\t col- ")(display col)(newline)
        (do ((row 0 (+ row 1))) ((>= row (vector-length board)))
          ;(display "\t\t row- ")(display row)(newline)
          ;(display "\t\t\t old conflict- ")(display leastCon)(display " new conflict- ")(display (checkConflicts board row col))(newline)
          (if (<= (checkConflicts board row col) leastCon)
              (begin
                ;(display "\t\t\t new low conflict!")(newline)
                (set! leastCon (checkConflicts board row col))
                (set! leastConRow row)
                )
              '()
              )
          )
        (vector-set! board col leastConRow)
        ;(display "\t\t\t")(display board)(newline)
    (solvLoop2 board (random (vector-length board)))
        )
  )
;check to see if there's another rowNum in board
(define (checkRow board row col)
  (let ((conflicts 0))
    (do ((i 0 (+ i 1))) ((>= i (vector-length board)))
      (set! count (+ count 1))
      (if (and (eqv? row (vector-ref board i)) (not (eqv? i col)))
          (begin
            (set! count (+ count 1))
            (set! conflicts (+ conflicts 1))
            )
          '()
          )
      )
    conflicts
    )
  )
(define (checkDiag board row col conflicts)
  (do ((i 0 (+ i 1))) ((>= i (vector-length board)))
    (begin
      (set! count (+ count 1))
      (if (and (or (eqv?  (+ row (abs (- col i))) (vector-ref board i)) (eqv? (- row (abs (- col i))) (vector-ref board i))) (not (eqv? i col)))
          (begin
            (set! count (+ count 1))
            (set! conflicts (+ conflicts 1))
            )
          '()
          )
      )
    )
  conflicts
  )

(define (checkConflicts board row col)
    (+ (checkDiag board row col 0) (checkRow board row col))
  )

(define (average n)
  (let ((mean 0) (stDev 0) (stDevMean 0))
    (do ((i 0 (+ i 1))) ((>= i 100))
      (nqueens n)
      )
    (set! count (/ count 100.0))
    (do ((i 0 (+ i 1))) ((>= i 100))
      (nqueens n)
      )
    (newline)(display count)
    )
  )

(define (runTest n)
  (do ((i 4 (+ i 1))) ((>= i n))
    (display i)(display "- ")
    (average i)
    (newline)
    (set! count 0)
    )
  )
(runTest 20)
(average 20)