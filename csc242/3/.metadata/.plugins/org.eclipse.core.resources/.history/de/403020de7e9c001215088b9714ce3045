import java.io.IOException;
import java.util.*;
import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;

/*
 * driver class for exact inference.
 * Contains all necessary information for calculating the probability vector of a query variable given evidence
 * 
 */
public class ExactInferenceRG extends InferenceRG {
	
	public ExactInferenceRG(BNode query,BayesianNetworkRG bnet) {
		this.query = query;
		this.bnet = bnet;
		this.evidence = null;
	}
	
	public ExactInferenceRG(BNode query,ArrayList<String[]> evidence,BayesianNetworkRG bnet) {
		super();
	}
	
	public double getProbability() {
		return sumChain();
	}
	
	public double sumChain() {
		//collect all unused variablse
		ArrayList<BNode> unused = BNode.copyArray(bnet.getNodes());
		if(evidenceVars != null)
			unused.removeAll(evidenceVars);
		unused.remove(query);
		//System.out.println("unused size- "+unused.size());
		
		//get the used ones (evidence and query
		ArrayList<BNode> used = BNode.copyArray(bnet.getNodes());
		used.removeAll(unused);
		//System.out.println("used size- "+used.size());
		
		//set up the tree
		JointDistTree sumTree = new JointDistTree(unused,used);
		System.out.println("sum probs");
		double answer = sumTree.sumProbs(bnet);
		return answer;
	}
	
	public static void main(String[] args) throws IOException, ParserConfigurationException, SAXException {
		//set up network from file
		XMLBIFParserRG parser = new XMLBIFParserRG();
		BayesianNetworkRG network = parser.readNetworkFromFile(args[0]);
		
		//set up query variable
		System.out.println("setting up query");
		String[] qClause = args[1].split("=");
		BNode query = network.getNodeByName(qClause[0]);
		query.setVariable(qClause[1]);
		
		//deal with evidence variables, call the exact Inference appropriately
		ExactInferenceRG ei;
		System.out.println("setting up evidence");
		if(args.length > 2) {
			String[] eClauses = args[2].split(",");
			ArrayList<String[]> eFinal = new ArrayList<String[]>();
			for(int i = 0; i < eClauses.length; i++) {
				String[] eClause = eClauses[i].split("=");
				eFinal.add(eClause); 
			}
			ei = new ExactInferenceRG(query,eFinal,network); 
		}
		else
			ei = new ExactInferenceRG(query,network);
		//get the probability
		System.out.println(ei.getProbability());
	}

}
