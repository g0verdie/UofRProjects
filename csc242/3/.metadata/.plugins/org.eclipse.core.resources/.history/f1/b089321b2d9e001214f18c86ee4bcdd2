import java.io.IOException;
import java.util.*;

import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
public class GibbsSampling extends InferenceRG{
	
	public GibbsSampling(BNode query,BayesianNetworkRG bnet) 
	{super(query,bnet);}
	
	public GibbsSampling(BNode query,String evidence,BayesianNetworkRG bnet) 
	{super(query,evidence,bnet);}
	
	//main solving algorithm
	public double[] gibbsAsk() {
		Random random = new Random();
		//set up answer vector
		ArrayList<String> queryVals = query.getVariable().getDomain();
		int[] foundEach = new int[queryVals.size()];
		for(int i : foundEach)
			i = 0;
		
		//get nonEvidence Variables
		ArrayList<BNode> nonEv = BNode.copyArray(bnet.getNodes());
		if(evidenceVars.size() > 0)
			nonEv.removeAll(evidenceVars);
		
		//assign random values to each from domain
		for(int i = 0; i < nonEv.size(); i++) {
			BNode current = nonEv.get(i);
			ArrayList<String> currentDomain = current.getDomain();
			current.setVariable(currentDomain.get(random.nextInt(currentDomain.size())));
		}
		
		double[] probEach = new double[queryVals.size()];
		//for a number of iterations, sample a value for each value and note the value of the query variable
		for(int i = 0; i < 1000000; i++) {
			for(int j = 0; j < nonEv.size(); j++) {
				//change the value of current nonEv by sampling using markov blankets
				BNode current = nonEv.get(j);
				current.setVariable(mbSample(current));
				//note query variable
				probEach[query.getDomain().indexOf(query.getVal())]++;
			}
		}
		return normalize(probEach);
	}
	
	//sampling using markov blanket
	public String mbSample(BNode bnode) {

		double[] endProbs = new double[bnode.getDomain().size()];
		String holdVar = bnode.getVal();

		//for each domain value
		for(int i = 0; i < endProbs.length; i++) {
			//get the probability of that value
			bnode.setVariable(bnode.getDomain().get(i));
			double fromParents = bnode.getCPT().findSpot(bnode.getParents());
			double product = 1;
			ArrayList<BNode> children = bnet.getChildren(bnode);
			
			//for each of the children
			for(int j = 0; j < children.size(); j++) {
				BNode currentChild = children.get(j);
				product *= currentChild.getCPT().findSpot(currentChild.getParents());
			}
			endProbs[i] = product*fromParents;
		}
		bnode.setVariable(holdVar);
		//sample using preference for most likely
		return bnode.getDomain().get(greatest(endProbs));
	}

	//returns a random spot in the vector provided, with a bias towards more likely outcomes
	public int greatest(double[] vector) {
		Random random = new Random();
		
		vector = normalize(vector);
		double[][] range = new double[vector.length][2];
		//give each spot a range
		double base = 0;
		for(int i = 0; i < range.length; i++) {
			range[i][0] = base;
			range[i][1] = base + vector[i];
			base += vector[i];
		}
		
		double rn = random.nextDouble();
		//double greatest = 0;
		int index = 0;
		for(int i = 0; i < vector.length; i++) {
			if(rn >= range[i][0] && rn < range[i][1])
				index = i;
		}
		return index;
	}
	
	public static void main(String[] args) throws IOException, ParserConfigurationException, SAXException {
		long start = System.currentTimeMillis();
		XMLBIFParserRG parser = new XMLBIFParserRG();
		//create network
		BayesianNetworkRG network = parser.readNetworkFromFile(args[0]);
		
		//get query
		BNode query = network.getNodeByName(args[1]);
		
		GibbsSampling gs;
		//set up evidence (if any)
		if(args.length > 2) {
			gs = new GibbsSampling(query,args[2],network);
		}
		else{
			gs = new GibbsSampling(query,network);
		}
		//get answer
		gs.answer = gs.gibbsAsk();
		gs.printQuery();
		System.out.println("\n\n\n\ttime needed- "+(System.currentTimeMillis()-start)+"ms");
	}
}