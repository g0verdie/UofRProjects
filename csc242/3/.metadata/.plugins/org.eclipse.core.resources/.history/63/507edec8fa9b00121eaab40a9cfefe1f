import java.util.*;
public class CPTRG {
	private CPTRGNode head;

	public CPTRG(ArrayList<RandomVariableRG> vars) {
		//initialize head
		head = new CPTRGNode(vars.get(0),"head");
		for(int i = 0; i < vars.get(0).getDomain().size(); i++) {
			head.addChild(addVar(vars,vars.get(0).getDomain().get(i)));
		}
	}
	
	public CPTRGNode addVar(ArrayList<RandomVariableRG> varsLeft,String parentDomain) {
		CPTRGNode currentNode = new CPTRGNode(varsLeft.get(0),parentDomain);
		ArrayList<RandomVariableRG> varsLeft1 = new ArrayList<RandomVariableRG>();
		varsLeft1.addAll(varsLeft);
		varsLeft1.remove(0);
		//if no more variables, were done adding children
		if(varsLeft1.size() == 0)
			return currentNode;
		//otherwise repeat for another layer (variable)
		else {
			for(int i = 0; i < varsLeft.get(0).getDomain().size(); i++) {
				currentNode.addChild(addVar(varsLeft1,varsLeft.get(0).getDomain().get(i)));
			}
		}
			
		return currentNode;
	}
	
	public ArrayList<CPTRGNode> getLeaves() {
		ArrayList<CPTRGNode> leaves = new ArrayList<CPTRGNode>();
		//System.out.println(head.children.size());
		for(CPTRGNode child : head.children) {
			getLeavesRec(child,leaves);
		}
		return leaves;
	}
	public void getLeavesRec(CPTRGNode node,ArrayList<CPTRGNode> leaves) {
		if(node.children.size() == 0) {
			leaves.add(node);
		}
		else {
			for(CPTRGNode child : node.children) {
				getLeavesRec(child,leaves);
			}
		}
	}
	
	public BNode findBNode(ArrayList<BNode> parents, RandomVariableRG lookFor) {
		for(int i = 0; i < parents.size(); i++) {
			if(parents.get(i).getName().equals(lookFor.getName()))
				return parents.get(i);
		}
		return null;
	}
	public void addProbs(ArrayList<Double> probabilities) {
		ArrayList<CPTRGNode> leaves = this.getLeaves();
		//System.out.println(leaves.size());
		for(int i = 0; i < probabilities.size(); i++)
			leaves.get(i).addProb(probabilities.get(i));
			
	}
	
	public double findSpot(ArrayList<BNode> conjunct) {
		//the node we want to go to
		CPTRGNode goTo = head.children.get(0);
		BNode currentVar = findBNode(conjunct,goTo.var);
		
		//pick the child that goes with currentVar's value
		for(int i = 0; i < head.children.size(); i++) {
			CPTRGNode currentChild = head.children.get(i);
			if(currentChild.val.equals(currentVar.getVariable().getValue())) {
				return findSpotRec(conjunct,currentChild);
			}
		}
		return 0;
	}
	
	public double findSpotRec(ArrayList<BNode> conjunct, CPTRGNode currentNode) {
		if(currentNode.children.size() == 0)
			return currentNode.probability;
		
		CPTRGNode goTo = currentNode.children.get(0);
		BNode currentVar = findBNode(conjunct,goTo.var);
		
		for(int i = 0; i < currentNode.children.size(); i++) {
			CPTRGNode currentChild = currentNode.children.get(i);
			if(currentChild.val.equals(currentVar.getVariable().getValue())) {
				return findSpotRec(conjunct,currentChild);
			}
		}
		return 0;
	}

	/*public double findSpot(ArrayList<BNode> conjunct) {
		//System.out.println("parents size- "+parents.size());
		BNode currentVar = findBNode(conjunct,head.children.get(0).var);
		String varValue = currentVar.getVariable().getValue();
		//System.out.println("currentVar= "+currentVar.getName());
		for(int i = 0; i < head.children.size(); i++) {
			CPTRGNode currentChild = head.children.get(i);
			if(varValue.equals(currentChild.var.getValue())) {
				return findSpotRec(currentChild,conjunct);
			}
		}
		System.out.println("shouldn't  be here");
		return 0;
	}
	
	public double findSpotRec(CPTRGNode currentChild,ArrayList<BNode> conjunct) {
		//if we're at a leaf
		System.out.println("currentVar= "+currentChild.name);
		if(currentChild.children.size() == 0) {
			System.out.println("gettin probability- "+currentChild.probability);
			return currentChild.probability;
		}
		//otherwise we gotta go deeper
		else {
			BNode currentVar = findBNode(conjunct,currentChild.children);
			for(int i = 0; i < head.children.size(); i++) {
				CPTRGNode currentChild1 = currentChild.children.get(i);
				if(currentVar.getVariable().getValue().equals(currentChild1.var.getValue()))
					return findSpotRec(currentChild1,conjunct);
			}
			return 0;
		}
	}*/
		
		public void print() {
			head.print();
			System.out.println("children = "+head.children.size());
			for(int i = 0; i < head.children.size(); i++) {
				System.out.print("\t");
				printRec(head.children.get(i),1);
			}
		}
		
		public void printRec(CPTRGNode node,int depth) {
			node.print();
			if(node.children.size() != 0){
				System.out.println("onto children");
				for(int i = 0; i < node.children.size(); i++) {
					System.out.print("\t");
					printRec(node.children.get(i),depth++);
				}
			}
		}
	private class CPTRGNode {
		public String val;
		public String name;
		public ArrayList<CPTRGNode> children;
		public double probability;
		public RandomVariableRG var;
		
		public CPTRGNode(RandomVariableRG var,String val) {
			this.val = val;
			this.var = var;
			name = var.getName();
			children = new ArrayList<CPTRGNode>(var.getDomain().size());
			this.probability = -1;
		}
		
		public void addChild(CPTRGNode child) {
			this.children.add(child);
		}
		
		public void addProb(double probability) {
			this.probability = probability;
		}
		
		public void print() {
			System.out.print("CPTRGNODE, ");
			System.out.print("name = "+name+", ");
			if(probability != -1) {
				System.out.print("val = "+val+", ");
				System.out.println("probability = "+probability);
			}
			else 
				System.out.println("val = "+val+", ");
		}
	}
}
