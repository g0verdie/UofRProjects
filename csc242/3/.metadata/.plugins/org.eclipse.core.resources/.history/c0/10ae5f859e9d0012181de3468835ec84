import java.io.IOException;
import java.util.*;

import javax.xml.parsers.ParserConfigurationException;
import org.xml.sax.SAXException;
public class InferenceRG {
	
	BNode query;
	ArrayList<BNode> evidenceVars;
	BayesianNetworkRG bnet;
	double[] answer;
	
	//constructor if there's evidence
	public InferenceRG(BNode query,String evidence,BayesianNetworkRG bnet) {
		this.query = query;
		this.bnet = bnet;
		evidenceVars = new ArrayList<BNode>();
		this.setUpEvidence(evidence);
	}
	//constructor if no evidence
	public InferenceRG(BNode query,BayesianNetworkRG bnet) {
		this.query = query;
		this.bnet = bnet;
		evidenceVars = new ArrayList<BNode>();
	}
	
	//converts string of evidence into BNodes
	public void setUpEvidence(String evidence) {
		
		String[] eClauses = evidence.split(",");
		ArrayList<String[]> eFinal = new ArrayList<String[]>();
		for(int i = 0; i < eClauses.length; i++) {
			String[] eClause = eClauses[i].split("=");
			eFinal.add(eClause); 
		}
		
		for(String[] clause : eFinal) {
			BNode current = bnet.getNodeByName(clause[0]);
			current.setVariable(clause[1]);
			evidenceVars.add(current);
		}
	}
	
	//normalizes an answer vector
	public double[] normalize(double[] vector) {
		double sum = 0;
		for(int i = 0; i < vector.length; i++) {
			sum += vector[i];
		}
		double alpha = 1.0 / sum;
		double[] toReturn = new double[vector.length];
		for(int i = 0; i < vector.length; i++) {
			vector[i] *= alpha;
			toReturn[i] = vector[i];
		}
		return toReturn;
	}
	
	public void printVector(double[] vec) {
		System.out.print("< ");
		for(double v : vec) {
			System.out.print(v+", ");
		}
		System.out.println(" >");
	}
	
	//prints the whole query, including query, evidence, and the resulting answer vector
	public void printQuery() {
		System.out.print("Query- P("+query.getName()+"|");
		if (evidenceVars.size() > 0) {
			for (int i = 0; i < evidenceVars.size() - 1; i++)
				System.out.print(evidenceVars.get(i).getName() + "= "
						+ evidenceVars.get(i).getVal() + ", ");
			System.out.print(evidenceVars.get(evidenceVars.size() - 1)
					.getName()
					+ "= "
					+ evidenceVars.get(evidenceVars.size() - 1).getVal());
		}
		else
			System.out.print("*no evidence*");
		System.out.println(") =   ");
		printVector(answer);
	}
}
