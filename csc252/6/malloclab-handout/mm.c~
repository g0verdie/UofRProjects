/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "dscarafo",
    /* First member's full name */
    "Dan Scarafoni",
    /* First member's email address */
    "dscarafo@u.rochester.edu",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};

/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8
#define WSIZE 4
#define DSIZE 8
#define INIT_SIZE 4 * WSIZE
#define OVERHEAD 8
/* max of 2 ints */
#define MAX(x,y) ((x) > (y)? (x) : (y))
#define BLOCK_SIZE  (ALIGN(sizeof(mm_block)))
/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)
#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))
/* read/write word at p */
#define GET(p) (**size_t *) (p))
#define PUT(p,val) (*(size_t*)(p) = (val))
/* get size of fields at p */
#define GET_SIZE(p) (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & ~0x1)
/* get header/footer of bp */
#define HDRP(bp) ((char *)(bp)-WSIZE)
#define FTRP(bp) (char *)(bp) + GET_SIZE(HDRP(bp - DSIZE)
/* next and previous block from bp */
#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))
/* packs size and free bit */
#define PACK(size,free) ((size | (free))

/*
struct _mm_block {
	int size;
	struct _mm_block* next;
	int is_free;
	
};
typedef struct _mm_block mm_block;
mm_block* head = mem_sbrk(0);
*/

/* 
 * mm_init - initialize the malloc package.
 * setup heap
 */
int mm_init(void)
{
	printf("align %d",ALIGN(3));
	return 0;
}

/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
	size_t asize;
	size_t extendsize;
	char* bp;
	
	if(size <= 0)
		return NULL;
		
	if(size <= DSIZE)
		asize = DSIZE + OVERHEAD;
	else
		asize = DSIZE * ((size + (OVERHEAD) + (DSIZE-1)) / DSIZE);
		
	if((bp = find_fit(asize)) != NULL) {
		place(bp,asize);
		return bp;
	}
	
	extendsize = MAX(asize,INIT_SIZE);
	if((bp= extend_heap(extendsize/WSIZE)) == NULL)
		return NULL;
	place(bp,asize);
	return bp;
	
	/*
    int newsize = ALIGN(size + SIZE_T_SIZE);
    void *p = mem_sbrk(newsize);
    if (p == (void *)-1)
	return NULL;
    else {
	
	mm_block* current = head;
	mm_block* last = NULL;
	while(current->next != NULL && (current->is_free && ALIGN(current->size) >= size)) { 
		last = current;
		current = current->next;
	}
	if(current->next == NULL) {
		int newsize = ALIGN(size + SIZE_T_SIZE + BLOCK_SIZE);
		void *p = mem_sbrk(newsize);
    		if (p == (void *)-1)
			return NULL;
		else {
			*(size_t *)p = size;
        		return (void *)((char *)p + SIZE_T_SIZE);
		}
	}
    	else {
		
	}
	*/
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *bp)
{
	size_t size = GET_SIZE(HDRP(bp));
	
	PUT(HDRP(bp), PACK(size,0));
	PUT(FTRP(bp), PACK(size,0));
}

/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)
{
    void *oldptr = ptr;
    void *newptr;
    size_t copySize;
    
    newptr = mm_malloc(size);
    if (newptr == NULL)
      return NULL;
    copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
    if (size < copySize)
      copySize = size;
    memcpy(newptr, oldptr, copySize);
    mm_free(oldptr);
    return newptr;
}

void place() {
}
void* find_fit(size_t asize) {
	return NULL;
}














